명령어
 - 할당문, 반복문, 비교문 등은 C언어와 동일
 - 반복문에 foreach문 추가:
     foreach(Type x in collection) { ... }
 - 호출문
    Class.f(x, y ,z);
    전역함수/정적함수/static function
    move(x, 10, 20); => x.move(10, 20);
    멤버 함수 / member function

데이터 : type과 memory allocation scheme이 연동됨

// 장점 : 단순해짐
// 단점 : 효율성 저하(하드웨어의 발전으로 인해 효율성이 덜 중요해졌기 때문)

 - 기본형 : 무조건 스택 영역에서 할당 됨 (정적변수 / 자동변수)
    문자형 정수형 실수형 레퍼런스

 - 객체형 : 무조건 힙 영역에서 할당됨(동적변수)
	한 개 이상의 데이터를 구조체 덩어리로 정의
    구조체(배열도 구조체의 일종으로 취급함)
    열거형/함수 포인터/유니온은 활용 가치를 상실함
 - scope : 의미 없음
 * call by reference 개념이 사라짐

프로그램 구조
 - 클래스 단위로만 구성됨
   클래스 = (구조체 + 함수들)

==객체지향의 네 가지 속성==

1. data abstraction(자료 추상화)
어떠한 사물을 정의하고자 할 때 그 사물에 속하는 서로 밀접한
연관이 있는 데이터와 함수를 묶어서 표현하는 제도

2. inheritance(상속)
기존에 만들어진 클래스의 자원(데이터멤버/멤버함수)를
물려 받아서 재사용할 수 있는 제도

3. dynamic binding(동적 바인딩)
함수 호출을 위한 바인딩이 실행 시에 이루어지는 제도

4. polymoripism(다형개념)
객체들의 특성이 "서로 다르면서 같은 점" "서로 같으면서도 다른 점"을
다루는 제도

CLR(Common Runtime Library)
dll(Dynamic Linked Library)
