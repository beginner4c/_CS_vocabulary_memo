Exception Handling 예외처리
목적 - 신뢰성 향상
Ada 언어에서 기원

과거의 방법
 - Defensive Programming
1. 함수를 본인이 직접 작성하는 경우
2. 라이브러리 함수로 만드는 경우

예외처리의 세가지 역할분담
1. 공급자  throw
 - exception detection 예외 탐지
2. 사용자  catch
 - exception handling 예외 처리
3. 에러정보  exception 객체

generic class
 - 임의의 데이터를 관리하는 범용 컬렉션 객체 (C++ template class)
 - 어지간한 컬렉션 객체들은 라이브러리에 구현되어 있기에 굳이 만들어 사용할 필요는 없다

Stack<T>
Queue<T>
LinkedList<T>
ArrayList<T>
HashTable<T1, T2>
Tree<T>

복소수 complex number

a = 1.2 + 1.5i
b = 2.1 + 3.2i

real part/imaginary part

magnitude(a) = sqrt(1.2*1.2 + 1.5*1.5)

a + b = (1.2 + 2.1) + (1.5 + 3.2)i
a - b = (1.2 - 2.1) + (1.5 - 3.2)i
a * b = (1.2 * 2.1 - 1.5 * 3.2) + (1.2 * 3.2 + 1.5 * 2.1)i

1. member function으로 구현하는 경우
 - receiver 객체와 bound 되어 있음
  ex) a.magnitude() 라고 할 때 a를 receiver라고 한다
 - this가 존재함

2. static member function으로 구현하는 경우
 - 특정 객체와 bound 되어있지 않음
 - this가 없음
 - 전역 함수

일반 member function의 경우 (이걸 추구하자)
 - a.move(x,y,z); // message sending
 - a야~ x,y,z 를 넘겨줄테니 move 실행해라

static member function의 경우
 - xxx.move(a,x,y,z); // function call
