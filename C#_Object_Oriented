객체 지향의 네 가지 주요 특성
1. Data Abstraction(자료 추상화)
2. Inheritance(상속)
3. Dynamic Binding(동적 바인딩)
4. Polymorphism(다형성)

1. Data Abstraction 자료 추상화
 - 어떠한 사물을 정의하고자 할 때 그 사물에 필수적으로 소속된
 서로 밀접한 연관이 있는 함수와 데이터를 묶어서 사물을 표현하는 방법
 class = data members + member functions

 Specification 명세부
 - 사용자 입장에서 알아야 할 최소한의 지식
 사용 목적과 사용 방법(함수 시그니처)

 Implementation 구현부
 - 공급자 입장에서 알아야 할 모든 지식
 - data member / function body

 Information Hiding (Data Encapsulation)
정보 은닉 (자료 캡슐화)
 - 사용자로 하여금 공급자의 구현 내역을 전혀 몰라도 되게끔
 공급자의 구현 정보를 숨기는 행위
 - 객체의 데이터 멤버(private part)를 외부에 노출하지 말고
 독립적으로 작성하는 제도

 가시성 (Visibility Modifier)
 public - JAVA에서의 default 값
 private - C#에서의 default 값
 protected


2. Inheritance 상속
 - 기존에 만들어진 부모 클래스의 자원(데이터멤버/멤버함수)을
 물려 받아서 재사용할 수 있는 제도
 데이터 멤버에 대한 조치 사항
 - 추가
 멤버 함수에 대한 조치 사항
 - 추가, 변경(override 재정의)
  변경시의 행위
 - override (overload와 비교)
  * 상속이 개입된 경우 override, 상속이 개입되지 않은 경우 overrode
 parent class / base class(C#) / super class(JAVA)
 child class / derived class(C# / subclass(JAVA)


3. Dynamic Binding 동적 바인딩
 - 함수 호출을 위한 바인딩이 실행 시에 이루어지는 제도

 static binding 정적 바인딩
 - 함수 호출을 위한 바인딩이 실행 전에 이루어지는 제도


4. Polymorphism 다형개념
 - 객체들의 특성이 "서로 다르면서 같은 점" "서로 같으면서 다른 점"을 다루는 제도

 polymorphic container
 - 다형 객체

 RTTI
 - RunTime Type Identification




    == == 객체지향 프로그래머들의 관례 ====
 데이터 멤버는 구현부이기 때문에 private로 숨긴다

Access Function(관습) - data member에 access하기 위한 함수
read access function
 - getXXX(), getX(), getY(), getName(), getTitle() 등
 - argument가 없는 게 보통
write access function
 - setXXX(1), setX(10), setY(20), setName("kim"), setTitle("제목")
 - argument가 하나인 게 보통

MS property(문법)
 - public type Name {
	get{ return name;}
	set{ name = value;}
   }
