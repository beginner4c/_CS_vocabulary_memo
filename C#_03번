automatic garbage collection
 - C#, JAVA는 프로그래머가 따로 처리하지 않아도 자동으로 쓰지 않는 데이터를 정리해준다

initialization 초기화
 - class가 호출될 때 data member에 초기값을 넣어주는 행위

constructor 생성자
 - class를 호출하면 초기화(initalization)를 해주는 함수
 - 따로 return type이 없어도 된다

default constructor
 - argument가 없는 생성자

data member : class 내에 소속된 data
member function : class 내에 소속된 function

this가 있는 함수 - 객체에 바운드(bound)되어 있는 함수
this가 없는 static 함수 - 객체에 바운드(bound)되지 않은 함수
 - static member function은 잘 사용하지 않는다

receiver = 객체 = reference

object instatiation
 - 객체를 생성하는 과정

this function
 - class 내의 일반 member function으로 항상 존재 한다
 
 Array 배열
 - 동일한 타입의 데이터를 여러개 모아놓은 collection 객체

C# 배열의 주요 특징 : 실제로는 구조체
 1. 동적 할당만 가능
 2. Length 필드 존재 - read only

C 언어의 자동할당
double x[10]; => C#에서는 불가능
C 언어의 동적할당
double *p = (double*)malloc(10 * sizeof(double));

C# 언어의 배열
double[] p = new double[10];

배열 element의 사용방법은 동일함
# 주의 : 2차원 배열의 경우는 두 가지 방법이 사용 됨

Stack 스택
 - LIFO(Last In First Out) 방식으로 운영되는 collection 객체
ex) Hanoi tower, stack frame, Maze...
목적? 과거의 발자취(history)를 보관하기 위한 용도

입력할 때 사용하는 함수 : push, add
제거할 때 사용하는 함수 : pop, remove
